// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
	conventions "go.opentelemetry.io/collector/semconv/v1.9.0"
)

type metricDiskFree struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills disk.free metric with initial data.
func (m *metricDiskFree) init() {
	m.data.SetName("disk.free")
	m.data.SetDescription("Amount of space available on the file system.")
	m.data.SetUnit("byte")
	m.data.SetEmptyGauge()
}

func (m *metricDiskFree) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskFree) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskFree) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskFree(cfg MetricConfig) metricDiskFree {
	m := metricDiskFree{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskTotal struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills disk.total metric with initial data.
func (m *metricDiskTotal) init() {
	m.data.SetName("disk.total")
	m.data.SetDescription("Total size of the file system.")
	m.data.SetUnit("byte")
	m.data.SetEmptyGauge()
}

func (m *metricDiskTotal) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskTotal) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskTotal) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskTotal(cfg MetricConfig) metricDiskTotal {
	m := metricDiskTotal{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskUsed struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills disk.used metric with initial data.
func (m *metricDiskUsed) init() {
	m.data.SetName("disk.used")
	m.data.SetDescription("Amount of space used on the file system.")
	m.data.SetUnit("byte")
	m.data.SetEmptyGauge()
}

func (m *metricDiskUsed) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskUsed) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskUsed) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskUsed(cfg MetricConfig) metricDiskUsed {
	m := metricDiskUsed{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricDiskUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills disk.utilization metric with initial data.
func (m *metricDiskUtilization) init() {
	m.data.SetName("disk.utilization")
	m.data.SetDescription("Percentage of disk usage for the file system.")
	m.data.SetUnit("utilization")
	m.data.SetEmptyGauge()
}

func (m *metricDiskUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricDiskUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricDiskUtilization) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricDiskUtilization(cfg MetricConfig) metricDiskUtilization {
	m := metricDiskUtilization{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMountFree struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills mount.free metric with initial data.
func (m *metricMountFree) init() {
	m.data.SetName("mount.free")
	m.data.SetDescription("Amount of space available on the file system.")
	m.data.SetUnit("byte")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMountFree) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, mountPointAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("mount.point", mountPointAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMountFree) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMountFree) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMountFree(cfg MetricConfig) metricMountFree {
	m := metricMountFree{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMountTotal struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills mount.total metric with initial data.
func (m *metricMountTotal) init() {
	m.data.SetName("mount.total")
	m.data.SetDescription("Total size of the file system.")
	m.data.SetUnit("byte")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMountTotal) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, mountPointAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("mount.point", mountPointAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMountTotal) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMountTotal) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMountTotal(cfg MetricConfig) metricMountTotal {
	m := metricMountTotal{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMountUsed struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills mount.used metric with initial data.
func (m *metricMountUsed) init() {
	m.data.SetName("mount.used")
	m.data.SetDescription("Amount of space used on the file system.")
	m.data.SetUnit("byte")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMountUsed) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, mountPointAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("mount.point", mountPointAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMountUsed) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMountUsed) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMountUsed(cfg MetricConfig) metricMountUsed {
	m := metricMountUsed{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMountUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills mount.utilization metric with initial data.
func (m *metricMountUtilization) init() {
	m.data.SetName("mount.utilization")
	m.data.SetDescription("Percentage of disk usage for the file system.")
	m.data.SetUnit("utilization")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMountUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, mountPointAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("mount.point", mountPointAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMountUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMountUtilization) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMountUtilization(cfg MetricConfig) metricMountUtilization {
	m := metricMountUtilization{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                 MetricsBuilderConfig // config of the metrics builder.
	startTime              pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity        int                  // maximum observed number of metrics per resource.
	metricsBuffer          pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo              component.BuildInfo  // contains version information.
	metricDiskFree         metricDiskFree
	metricDiskTotal        metricDiskTotal
	metricDiskUsed         metricDiskUsed
	metricDiskUtilization  metricDiskUtilization
	metricMountFree        metricMountFree
	metricMountTotal       metricMountTotal
	metricMountUsed        metricMountUsed
	metricMountUtilization metricMountUtilization
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.CreateSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                 mbc,
		startTime:              pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:          pmetric.NewMetrics(),
		buildInfo:              settings.BuildInfo,
		metricDiskFree:         newMetricDiskFree(mbc.Metrics.DiskFree),
		metricDiskTotal:        newMetricDiskTotal(mbc.Metrics.DiskTotal),
		metricDiskUsed:         newMetricDiskUsed(mbc.Metrics.DiskUsed),
		metricDiskUtilization:  newMetricDiskUtilization(mbc.Metrics.DiskUtilization),
		metricMountFree:        newMetricMountFree(mbc.Metrics.MountFree),
		metricMountTotal:       newMetricMountTotal(mbc.Metrics.MountTotal),
		metricMountUsed:        newMetricMountUsed(mbc.Metrics.MountUsed),
		metricMountUtilization: newMetricMountUtilization(mbc.Metrics.MountUtilization),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(pmetric.ResourceMetrics)

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	}
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricDiskFree.emit(ils.Metrics())
	mb.metricDiskTotal.emit(ils.Metrics())
	mb.metricDiskUsed.emit(ils.Metrics())
	mb.metricDiskUtilization.emit(ils.Metrics())
	mb.metricMountFree.emit(ils.Metrics())
	mb.metricMountTotal.emit(ils.Metrics())
	mb.metricMountUsed.emit(ils.Metrics())
	mb.metricMountUtilization.emit(ils.Metrics())

	for _, op := range rmo {
		op(rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordDiskFreeDataPoint adds a data point to disk.free metric.
func (mb *MetricsBuilder) RecordDiskFreeDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskFree.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskTotalDataPoint adds a data point to disk.total metric.
func (mb *MetricsBuilder) RecordDiskTotalDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskTotal.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskUsedDataPoint adds a data point to disk.used metric.
func (mb *MetricsBuilder) RecordDiskUsedDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricDiskUsed.recordDataPoint(mb.startTime, ts, val)
}

// RecordDiskUtilizationDataPoint adds a data point to disk.utilization metric.
func (mb *MetricsBuilder) RecordDiskUtilizationDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricDiskUtilization.recordDataPoint(mb.startTime, ts, val)
}

// RecordMountFreeDataPoint adds a data point to mount.free metric.
func (mb *MetricsBuilder) RecordMountFreeDataPoint(ts pcommon.Timestamp, val int64, mountPointAttributeValue string) {
	mb.metricMountFree.recordDataPoint(mb.startTime, ts, val, mountPointAttributeValue)
}

// RecordMountTotalDataPoint adds a data point to mount.total metric.
func (mb *MetricsBuilder) RecordMountTotalDataPoint(ts pcommon.Timestamp, val int64, mountPointAttributeValue string) {
	mb.metricMountTotal.recordDataPoint(mb.startTime, ts, val, mountPointAttributeValue)
}

// RecordMountUsedDataPoint adds a data point to mount.used metric.
func (mb *MetricsBuilder) RecordMountUsedDataPoint(ts pcommon.Timestamp, val int64, mountPointAttributeValue string) {
	mb.metricMountUsed.recordDataPoint(mb.startTime, ts, val, mountPointAttributeValue)
}

// RecordMountUtilizationDataPoint adds a data point to mount.utilization metric.
func (mb *MetricsBuilder) RecordMountUtilizationDataPoint(ts pcommon.Timestamp, val float64, mountPointAttributeValue string) {
	mb.metricMountUtilization.recordDataPoint(mb.startTime, ts, val, mountPointAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
